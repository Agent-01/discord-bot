import { SlashCommandBuilder, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } from "discord.js";
import { get_warnings } from "../../../utils/get_warnings.js";
import { get_weather } from "../../../utils/get_weather.js";

export const data = new SlashCommandBuilder()
    .setName("weather")
    .setDescription("Get the weather information of some place in Hong Kong (default HKO)\nÂèñÂæóÈ¶ôÊ∏ØÂ§©Ê∞£")
    .addStringOption(option =>
        option.setName("place")
            .setDescription("The place to get weather information/ÂèñÂæóÂ§©Ê∞£Ë≥áË®äÁöÑÂú∞Èªû")
            .setRequired(false))
    .addBooleanOption(option =>
        option.setName("ephemeral")
            .setDescription("Only you can see this message/Âè™Êúâ‰Ω†ËÉΩÁúãÂæóÂà∞Ê≠§Ë®äÊÅØ")
            .setRequired(false));

export async function execute(interaction) {
    let hk_place = "";
    hk_place = interaction.options.getString("place");
    if (hk_place == null || hk_place == "") {
        hk_place = "HK Observatory";
        await interaction.deferReply();
    } else if (hk_place == "Chek Lap Kok" || hk_place == "Cheung Chau" || hk_place == "Clear Water Bay" || hk_place == "Happy Valley" || hk_place == "HK Observatory" || hk_place == "HK Park" || hk_place == "Kai Tak Runway Park" || hk_place == "Kau Sai Chau" || hk_place == "King's Park" || hk_place == "Kowloon City" || hk_place == "Kwun Tong" || hk_place == "Lau Fau Shan" || hk_place == "Ngong Ping" || hk_place == "Pak Tam Chung" || hk_place == "Peng Chau" || hk_place == "Sai Kung" || hk_place == "Sha Tin" || hk_place == "Sham Shui Po" || hk_place == "Shau Kei Wan" || hk_place == "Shek Kong" || hk_place == "Sheung Shui" || hk_place == "Stanley" || hk_place == "Ta Kwu Ling" || hk_place == "Tai Lung" || hk_place == "Tai Mei Tuk" || hk_place == "Tai Mo Shan" || hk_place == "Tai Po" || hk_place == "Tate's Cairn" || hk_place == "The Peak" || hk_place == "Tseung Kwan O" || hk_place == "Tsing Yi" || hk_place == "Tsuen Wan Ho Koon" || hk_place == "Tsuen Wan Shing Mun Valley" || hk_place == "Tuen Mun" || hk_place == "Waglan Island" || hk_place == "Wetland Park" || hk_place == "Wong Chuk Hang" || hk_place == "Wong Tai Sin" || hk_place == "Yuen Long Park") {
        await interaction.deferReply();
    } else {
        await interaction.reply({ content: "Invalid place\nThe following places are available: Chek Lap Kok, Cheung Chau, Clear Water Bay, Happy Valley, HK Observatory, HK Park, Kai Tak Runway Park, Kau Sai Chau, King's Park, Kowloon City, Kwun Tong, Lau Fau Shan, Ngong Ping, Pak Tam Chung, Peng Chau, Sai Kung, Sha Tin, Sham Shui Po, Shau Kei Wan, Shek Kong, Sheung Shui, Stanley, Ta Kwu Ling, Tai Lung, Tai Mei Tuk, Tai Mo Shan, Tai Po, Tate's Cairn, The Peak, Tseung Kwan O, Tsing Yi, Tsuen Wan Ho Koon, Tsuen Wan Shing Mun Valley, Tuen Mun, Waglan Island, Wetland Park, Wong Chuk Hang, Wong Tai Sin, Yuen Long Park", ephemeral: true });
        return;
    }
    let tlst = await get_weather(hk_place);
    let temp = tlst[0];
    let h = tlst[1];
    let wind_dir = tlst[2];
    let wind = tlst[3];
    let p = tlst[4];
    let v = tlst[5];
    let well = tlst[7];
    let updte = tlst[6];
    if (h != "N/A") h += "%";
    let stri = await get_warnings();
    const Embed = new EmbedBuilder()
        .setColor(0x0390fc)
        .setTitle("üå§Ô∏èCurrent Weather of Hong Kong/ÁõÆÂâçÈ¶ôÊ∏ØÂ§©Ê∞£")
        .setDescription(`Displaying weather information of ${hk_place}`)
        .setThumbnail("https://upload.wikimedia.org/wikipedia/zh/thumb/1/11/Hong_Kong_Observatory_Logo_%282018%29.svg/640px-Hong_Kong_Observatory_Logo_%282018%29.svg.png")
        .addFields(
            {
                name: "Air Temperature/Ê∫´Â∫¶",
                value: `${temp}¬∞C`,
                inline: true
            },
            {
                name: "Relative Humidity/ÊøïÂ∫¶",
                value: h,
                inline: true
            },
            {
                name: "\u200b",
                value: "\u200b",
                inline: true
            },
            {
                name: "Wind Direction/È¢®Âêë",
                value: wind_dir,
                inline: true
            },
            {
                name: "Wind Speed/È¢®ÈÄü",
                value: wind,
                inline: true
            },
            {
                name: "Mean Sea Level Pressure/Âπ≥ÂùáÊµ∑Âπ≥Èù¢Â£ìÂäõ",
                value: p,
                inline: false
            },
            {
                name: "Visibility/ËÉΩË¶ãÂ∫¶",
                value: v,
                inline: true
            },
            {
                name: "Weather Condition/Â§©Ê∞£ÁãÄÊÖã",
                value: well.charAt(0).toUpperCase() + well.toLowerCase().slice(1),
                inline: false
            },
            {
                name: "Warning(s)/Ë≠¶Âëä",
                value: stri,
                inline: true
            },
            {
                name: "Updated at/Êõ¥Êñ∞ÊôÇÈñì",
                value: updte,
                inline: false
            }
        )
        .setTimestamp(Date.now())
        .setFooter({ text: `Requested by ${interaction.user.tag}`, iconURL: interaction.user.displayAvatarURL() });
    const row = new ActionRowBuilder()
        .addComponents(
            new ButtonBuilder()
                .setCustomId("weather_kowloon")
                .setLabel("‰πùÈæç/Kowloon")
                .setStyle(ButtonStyle.Danger)
        )
        .addComponents(
            new ButtonBuilder()
                .setCustomId("weather_hong_kong_island")
                .setLabel("È¶ôÊ∏ØÂ≥∂/Hong Kong Island")
                .setStyle(ButtonStyle.Primary)
        )
        .addComponents(
            new ButtonBuilder()
                .setCustomId("weather_new_territories")
                .setLabel("Êñ∞Áïå/New Territories")
                .setStyle(ButtonStyle.Success)
        );
    const row2 = new ActionRowBuilder()
        .addComponents(
            new ButtonBuilder()
                .setLabel("È¶ôÊ∏ØÂ§©ÊñáÂè∞/Hong Kong Observatory")
                .setStyle(ButtonStyle.Link)
                .setURL("https://www.hko.gov.hk/tc/index.html")
        );
    await interaction.editReply({ content: "", embeds: [Embed], components: [row,row2] });
}